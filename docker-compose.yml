version: "3.7"

services:
  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: frontend.Dockerfile
    entrypoint: ["npm", "run", "dev"]
    environment:
      NUXT_HOST: 0.0.0.0
      NUXT_PORT: 5000
    ports:
      - 5000:5000

  scraper:
    build:
      context: .
      dockerfile: scraper.Dockerfile
    command: ["spiders.py", "--help"]
    volumes:
      - ./scrapy.cfg:/app/scrapy.cfg
      - ./scraper:/app/scraper
      - ./spiders.py:/app/spiders.py
    depends_on:
      - "mongo1"

  mongo1:
    hostname: mongo1
    container_name: mongo1
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
    networks:
      - mongo-network
      - transport-network
    image: mongo:3.6-jessie
    expose:
      - 27017
    restart: always
    volumes:
      - mongo1:/data/db
    entrypoint: ["/usr/bin/mongod", "--bind_ip_all", "--replSet", "rs0"]

  mongo2:
    hostname: mongo2
    container_name: mongo2
    image: mongo:3.6-jessie
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
    networks:
      - mongo-network
    expose:
      - 27017
    restart: always
    volumes:
      - mongo2:/data/db
    entrypoint: ["/usr/bin/mongod", "--bind_ip_all", "--replSet", "rs0"]

  mongo3:
    hostname: mongo3
    container_name: mongo3
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    networks:
      - mongo-network
    image: mongo:3.6-jessie
    expose:
      - 27017
    restart: always
    volumes:
      - mongo3:/data/db
    entrypoint: ["/usr/bin/mongod", "--bind_ip_all", "--replSet", "rs0"]

  mongosetup:
    image: mongo:3.6-jessie
    links:
      - mongo1:mongo1
      - mongo2:mongo2
      - mongo3:mongo3
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    networks:
      - mongo-network
    volumes:
      - ./mongo:/scripts
    restart: "no"
    entrypoint: ["bash", "/scripts/mongo_setup.sh"]

  mongo-express:
    networks:
      - mongo-network
    depends_on:
      - mongo1
      - mongo2
      - mongo3
      - mongosetup
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_SERVER: mongo1,mongo2,mongo3

  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.2
    container_name: es01
    environment:
      - node.name=es01
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es02,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data01:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - elastic
  es02:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.2
    container_name: es02
    environment:
      - node.name=es02
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es01,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data02:/usr/share/elasticsearch/data
    networks:
      - elastic
  es03:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.2
    container_name: es03
    environment:
      - node.name=es03
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es01,es02
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data03:/usr/share/elasticsearch/data
    networks:
      - elastic

  transporter:
    image: yeasy/mongo-connector
    networks:
      - transport-network
    environment:
      MONGO: mongo1
    links:
      - "mongo1:mongo1"
      - "es01:es01"

volumes:
  mongo1:
  mongo2:
  mongo3:
  data01:
    driver: local
  data02:
    driver: local
  data03:
    driver: local

networks:
  mongo-network:
    driver: bridge
  transport-network:
    driver: bridge
  elastic:
    driver: bridge
